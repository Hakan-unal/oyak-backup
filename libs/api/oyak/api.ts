/* tslint:disable */
/* eslint-disable */
// @ts-nocheck

/**
 * PracticeGroupWebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore

import {
  DUMMY_BASE_URL,
  setApiKeyToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI } from './base';

/**
 *
 * @export
 * @interface ApprovedDailySignalStrategiesModel
 */
export interface ApprovedDailySignalStrategiesModel {
  /**
   *
   * @type {number}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  dailyEquitySignalStrategyId?: number;
  /**
   *
   * @type {any}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  scheduleId?: any | null;
  /**
   *
   * @type {string}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  symbol?: string | null;
  /**
   *
   * @type {string}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  status?: string | null;
  /**
   *
   * @type {number}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  totalIncome?: number;
  /**
   *
   * @type {number}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  positionCount?: number;
  /**
   *
   * @type {number}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  averageIncome?: number;
  /**
   *
   * @type {number}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  deflectionIncome?: number;
  /**
   *
   * @type {number}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  score?: number;
  /**
   *
   * @type {string}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  sequenceDate?: string;
  /**
   *
   * @type {string}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  created?: string;
  /**
   *
   * @type {string}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  createdBy?: string | null;
  /**
   *
   * @type {string}
   * @memberof ApprovedDailySignalStrategiesModel
   */
  approvedBy?: string | null;
}
/**
 *
 * @export
 * @interface ApprovedHourlySignalStrategiesModel
 */
export interface ApprovedHourlySignalStrategiesModel {
  /**
   *
   * @type {number}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  hourlyEquitySignalStrategyId?: number;
  /**
   *
   * @type {any}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  scheduleId?: any | null;
  /**
   *
   * @type {string}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  symbol?: string | null;
  /**
   *
   * @type {string}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  status?: string | null;
  /**
   *
   * @type {number}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  totalIncome?: number;
  /**
   *
   * @type {number}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  positionCount?: number;
  /**
   *
   * @type {number}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  averageIncome?: number;
  /**
   *
   * @type {number}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  deflectionIncome?: number;
  /**
   *
   * @type {number}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  score?: number;
  /**
   *
   * @type {string}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  sequenceDate?: string;
  /**
   *
   * @type {string}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  created?: string;
  /**
   *
   * @type {string}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  createdBy?: string | null;
  /**
   *
   * @type {string}
   * @memberof ApprovedHourlySignalStrategiesModel
   */
  approvedBy?: string | null;
}
/**
 *
 * @export
 * @interface BulletinModel
 */
export interface BulletinModel {
  /**
   *
   * @type {number}
   * @memberof BulletinModel
   */
  id?: number;
  /**
   *
   * @type {ResearchBulletinReportType}
   * @memberof BulletinModel
   */
  reportType?: ResearchBulletinReportType;
  /**
   *
   * @type {number}
   * @memberof BulletinModel
   */
  month?: number;
  /**
   *
   * @type {number}
   * @memberof BulletinModel
   */
  year?: number;
  /**
   *
   * @type {string}
   * @memberof BulletinModel
   */
  documentFileName?: string | null;
  /**
   *
   * @type {string}
   * @memberof BulletinModel
   */
  webSiteUrl?: string | null;
  /**
   *
   * @type {string}
   * @memberof BulletinModel
   */
  created?: string;
}
/**
 *
 * @export
 * @interface CaptchaResponse
 */
export interface CaptchaResponse {
  /**
   *
   * @type {string}
   * @memberof CaptchaResponse
   */
  result?: string | null;
  /**
   *
   * @type {string}
   * @memberof CaptchaResponse
   */
  type?: string | null;
  /**
   *
   * @type {string}
   * @memberof CaptchaResponse
   */
  captchaToken?: string | null;
}
/**
 *
 * @export
 * @interface CaptchaResponseResponseData
 */
export interface CaptchaResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof CaptchaResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {CaptchaResponse}
   * @memberof CaptchaResponseResponseData
   */
  data?: CaptchaResponse;
  /**
   *
   * @type {string}
   * @memberof CaptchaResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof CaptchaResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CaptchaResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof CaptchaResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface CustomerBirthdateCheckRequest
 */
export interface CustomerBirthdateCheckRequest {
  /**
   *
   * @type {string}
   * @memberof CustomerBirthdateCheckRequest
   */
  customerId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomerBirthdateCheckRequest
   */
  birthdate?: string;
  /**
   *
   * @type {string}
   * @memberof CustomerBirthdateCheckRequest
   */
  captcha?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomerBirthdateCheckRequest
   */
  captchaToken?: string | null;
}
/**
 *
 * @export
 * @interface CustomersModel
 */
export interface CustomersModel {
  /**
   *
   * @type {number}
   * @memberof CustomersModel
   */
  userId?: number;
  /**
   *
   * @type {string}
   * @memberof CustomersModel
   */
  customerId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomersModel
   */
  customerNo?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomersModel
   */
  partyId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomersModel
   */
  firstName?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomersModel
   */
  lastName?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomersModel
   */
  fullName?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomersModel
   */
  mail?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomersModel
   */
  phoneNumber?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomersModel
   */
  transactionRights?: string | null;
}
/**
 *
 * @export
 * @interface CustomersModelResponseData
 */
export interface CustomersModelResponseData {
  /**
   *
   * @type {string}
   * @memberof CustomersModelResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {CustomersModel}
   * @memberof CustomersModelResponseData
   */
  data?: CustomersModel;
  /**
   *
   * @type {string}
   * @memberof CustomersModelResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof CustomersModelResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CustomersModelResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof CustomersModelResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface DailyScanningGraphicsModel
 */
export interface DailyScanningGraphicsModel {
  /**
   *
   * @type {string}
   * @memberof DailyScanningGraphicsModel
   */
  symbol?: string | null;
  /**
   *
   * @type {number}
   * @memberof DailyScanningGraphicsModel
   */
  smA22?: number | null;
  /**
   *
   * @type {number}
   * @memberof DailyScanningGraphicsModel
   */
  smA50?: number | null;
  /**
   *
   * @type {number}
   * @memberof DailyScanningGraphicsModel
   */
  rsi?: number | null;
  /**
   *
   * @type {number}
   * @memberof DailyScanningGraphicsModel
   */
  rsI50?: number | null;
  /**
   *
   * @type {string}
   * @memberof DailyScanningGraphicsModel
   */
  date?: string | null;
  /**
   *
   * @type {number}
   * @memberof DailyScanningGraphicsModel
   */
  price?: number | null;
  /**
   *
   * @type {string}
   * @memberof DailyScanningGraphicsModel
   */
  updatedDate?: string | null;
}
/**
 *
 * @export
 * @interface DailyScanningSignalsModel
 */
export interface DailyScanningSignalsModel {
  /**
   *
   * @type {string}
   * @memberof DailyScanningSignalsModel
   */
  symbol?: string | null;
  /**
   *
   * @type {string}
   * @memberof DailyScanningSignalsModel
   */
  indicator?: string | null;
  /**
   *
   * @type {string}
   * @memberof DailyScanningSignalsModel
   */
  breakdownDirection?: string | null;
  /**
   *
   * @type {string}
   * @memberof DailyScanningSignalsModel
   */
  breakdownIndicator?: string | null;
  /**
   *
   * @type {string}
   * @memberof DailyScanningSignalsModel
   */
  breakdownDate?: string | null;
  /**
   *
   * @type {number}
   * @memberof DailyScanningSignalsModel
   */
  historicalBreakdownCount?: number | null;
  /**
   *
   * @type {number}
   * @memberof DailyScanningSignalsModel
   */
  historicalBreakdownReturn?: number | null;
  /**
   *
   * @type {number}
   * @memberof DailyScanningSignalsModel
   */
  signalPrice?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof DailyScanningSignalsModel
   */
  hasViopContract?: boolean | null;
  /**
   *
   * @type {number}
   * @memberof DailyScanningSignalsModel
   */
  updatePrice?: number | null;
}
/**
 *
 * @export
 * @interface EquitySignalRequest
 */
export interface EquitySignalRequest {
  /**
   *
   * @type {string}
   * @memberof EquitySignalRequest
   */
  symbol?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof EquitySignalRequest
   */
  status?: boolean | null;
}
/**
 *
 * @export
 * @interface ErrorModel
 */
export interface ErrorModel {
  /**
   *
   * @type {boolean}
   * @memberof ErrorModel
   */
  isBusinessError?: boolean;
  /**
   *
   * @type {string}
   * @memberof ErrorModel
   */
  message?: string | null;
  /**
   *
   * @type {string}
   * @memberof ErrorModel
   */
  stackTrace?: string | null;
}
/**
 *
 * @export
 * @interface GetApprovedDailySignalStrategiesResponse
 */
export interface GetApprovedDailySignalStrategiesResponse {
  /**
   *
   * @type {Array<ApprovedDailySignalStrategiesModel>}
   * @memberof GetApprovedDailySignalStrategiesResponse
   */
  list?: Array<ApprovedDailySignalStrategiesModel> | null;
}
/**
 *
 * @export
 * @interface GetApprovedDailySignalStrategiesResponseResponseData
 */
export interface GetApprovedDailySignalStrategiesResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetApprovedDailySignalStrategiesResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetApprovedDailySignalStrategiesResponse}
   * @memberof GetApprovedDailySignalStrategiesResponseResponseData
   */
  data?: GetApprovedDailySignalStrategiesResponse;
  /**
   *
   * @type {string}
   * @memberof GetApprovedDailySignalStrategiesResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetApprovedDailySignalStrategiesResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetApprovedDailySignalStrategiesResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetApprovedDailySignalStrategiesResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetApprovedHourlySignalStrategiesResponse
 */
export interface GetApprovedHourlySignalStrategiesResponse {
  /**
   *
   * @type {Array<ApprovedHourlySignalStrategiesModel>}
   * @memberof GetApprovedHourlySignalStrategiesResponse
   */
  list?: Array<ApprovedHourlySignalStrategiesModel> | null;
}
/**
 *
 * @export
 * @interface GetApprovedHourlySignalStrategiesResponseResponseData
 */
export interface GetApprovedHourlySignalStrategiesResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetApprovedHourlySignalStrategiesResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetApprovedHourlySignalStrategiesResponse}
   * @memberof GetApprovedHourlySignalStrategiesResponseResponseData
   */
  data?: GetApprovedHourlySignalStrategiesResponse;
  /**
   *
   * @type {string}
   * @memberof GetApprovedHourlySignalStrategiesResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetApprovedHourlySignalStrategiesResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetApprovedHourlySignalStrategiesResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetApprovedHourlySignalStrategiesResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetBulletinFilesResponse
 */
export interface GetBulletinFilesResponse {
  /**
   *
   * @type {Array<BulletinModel>}
   * @memberof GetBulletinFilesResponse
   */
  bulletinList?: Array<BulletinModel> | null;
}
/**
 *
 * @export
 * @interface GetBulletinFilesResponseResponseData
 */
export interface GetBulletinFilesResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetBulletinFilesResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetBulletinFilesResponse}
   * @memberof GetBulletinFilesResponseResponseData
   */
  data?: GetBulletinFilesResponse;
  /**
   *
   * @type {string}
   * @memberof GetBulletinFilesResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetBulletinFilesResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetBulletinFilesResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetBulletinFilesResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetCommentOfDayResponse
 */
export interface GetCommentOfDayResponse {
  /**
   *
   * @type {number}
   * @memberof GetCommentOfDayResponse
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCommentOfDayResponse
   */
  header?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetCommentOfDayResponse
   */
  entrance?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetCommentOfDayResponse
   */
  desc?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetCommentOfDayResponse
   */
  time?: string;
  /**
   *
   * @type {string}
   * @memberof GetCommentOfDayResponse
   */
  lastUpdatedDate?: string;
}
/**
 *
 * @export
 * @interface GetCommentOfDayResponseResponseData
 */
export interface GetCommentOfDayResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetCommentOfDayResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetCommentOfDayResponse}
   * @memberof GetCommentOfDayResponseResponseData
   */
  data?: GetCommentOfDayResponse;
  /**
   *
   * @type {string}
   * @memberof GetCommentOfDayResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommentOfDayResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetCommentOfDayResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetCommentOfDayResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetDailyScanningGraphicsResponse
 */
export interface GetDailyScanningGraphicsResponse {
  /**
   *
   * @type {Array<DailyScanningGraphicsModel>}
   * @memberof GetDailyScanningGraphicsResponse
   */
  list?: Array<DailyScanningGraphicsModel> | null;
  /**
   *
   * @type {string}
   * @memberof GetDailyScanningGraphicsResponse
   */
  lastUpdatedDate?: string | null;
}
/**
 *
 * @export
 * @interface GetDailyScanningGraphicsResponseResponsePage
 */
export interface GetDailyScanningGraphicsResponseResponsePage {
  /**
   *
   * @type {string}
   * @memberof GetDailyScanningGraphicsResponseResponsePage
   */
  recordId?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetDailyScanningGraphicsResponseResponsePage
   */
  completed?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetDailyScanningGraphicsResponseResponsePage
   */
  lastId?: number;
  /**
   *
   * @type {number}
   * @memberof GetDailyScanningGraphicsResponseResponsePage
   */
  totalRecordCount?: number;
  /**
   *
   * @type {GetDailyScanningGraphicsResponse}
   * @memberof GetDailyScanningGraphicsResponseResponsePage
   */
  data?: GetDailyScanningGraphicsResponse;
  /**
   *
   * @type {string}
   * @memberof GetDailyScanningGraphicsResponseResponsePage
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetDailyScanningGraphicsResponseResponsePage
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetDailyScanningGraphicsResponseResponsePage
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetDailyScanningGraphicsResponseResponsePage
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetDailyScanningSignalsResponse
 */
export interface GetDailyScanningSignalsResponse {
  /**
   *
   * @type {Array<DailyScanningSignalsModel>}
   * @memberof GetDailyScanningSignalsResponse
   */
  list?: Array<DailyScanningSignalsModel> | null;
  /**
   *
   * @type {string}
   * @memberof GetDailyScanningSignalsResponse
   */
  lastUpdatedDate?: string | null;
}
/**
 *
 * @export
 * @interface GetDailyScanningSignalsResponseResponseData
 */
export interface GetDailyScanningSignalsResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetDailyScanningSignalsResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetDailyScanningSignalsResponse}
   * @memberof GetDailyScanningSignalsResponseResponseData
   */
  data?: GetDailyScanningSignalsResponse;
  /**
   *
   * @type {string}
   * @memberof GetDailyScanningSignalsResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetDailyScanningSignalsResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetDailyScanningSignalsResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetDailyScanningSignalsResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetHourlyEquityBuySellGraphicResponse
 */
export interface GetHourlyEquityBuySellGraphicResponse {
  /**
   *
   * @type {Array<HourlyEquityBuySellGraphicModel>}
   * @memberof GetHourlyEquityBuySellGraphicResponse
   */
  list?: Array<HourlyEquityBuySellGraphicModel> | null;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityBuySellGraphicResponse
   */
  lastUpdatedDate?: string | null;
}
/**
 *
 * @export
 * @interface GetHourlyEquityBuySellGraphicResponseResponsePage
 */
export interface GetHourlyEquityBuySellGraphicResponseResponsePage {
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityBuySellGraphicResponseResponsePage
   */
  recordId?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityBuySellGraphicResponseResponsePage
   */
  completed?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetHourlyEquityBuySellGraphicResponseResponsePage
   */
  lastId?: number;
  /**
   *
   * @type {number}
   * @memberof GetHourlyEquityBuySellGraphicResponseResponsePage
   */
  totalRecordCount?: number;
  /**
   *
   * @type {GetHourlyEquityBuySellGraphicResponse}
   * @memberof GetHourlyEquityBuySellGraphicResponseResponsePage
   */
  data?: GetHourlyEquityBuySellGraphicResponse;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityBuySellGraphicResponseResponsePage
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityBuySellGraphicResponseResponsePage
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityBuySellGraphicResponseResponsePage
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetHourlyEquityBuySellGraphicResponseResponsePage
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetHourlyEquityCumulativeReturnResponse
 */
export interface GetHourlyEquityCumulativeReturnResponse {
  /**
   *
   * @type {Array<HourlyEquityCumulativeReturnModel>}
   * @memberof GetHourlyEquityCumulativeReturnResponse
   */
  list?: Array<HourlyEquityCumulativeReturnModel> | null;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityCumulativeReturnResponse
   */
  lastUpdatedDate?: string | null;
}
/**
 *
 * @export
 * @interface GetHourlyEquityCumulativeReturnResponseResponsePage
 */
export interface GetHourlyEquityCumulativeReturnResponseResponsePage {
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityCumulativeReturnResponseResponsePage
   */
  recordId?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityCumulativeReturnResponseResponsePage
   */
  completed?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetHourlyEquityCumulativeReturnResponseResponsePage
   */
  lastId?: number;
  /**
   *
   * @type {number}
   * @memberof GetHourlyEquityCumulativeReturnResponseResponsePage
   */
  totalRecordCount?: number;
  /**
   *
   * @type {GetHourlyEquityCumulativeReturnResponse}
   * @memberof GetHourlyEquityCumulativeReturnResponseResponsePage
   */
  data?: GetHourlyEquityCumulativeReturnResponse;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityCumulativeReturnResponseResponsePage
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityCumulativeReturnResponseResponsePage
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityCumulativeReturnResponseResponsePage
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetHourlyEquityCumulativeReturnResponseResponsePage
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetHourlyEquityDecisionStatusResponse
 */
export interface GetHourlyEquityDecisionStatusResponse {
  /**
   *
   * @type {Array<HourlyEquityDecisionStatusModel>}
   * @memberof GetHourlyEquityDecisionStatusResponse
   */
  list?: Array<HourlyEquityDecisionStatusModel> | null;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityDecisionStatusResponse
   */
  lastUpdatedDate?: string | null;
}
/**
 *
 * @export
 * @interface GetHourlyEquityDecisionStatusResponseResponseData
 */
export interface GetHourlyEquityDecisionStatusResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityDecisionStatusResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetHourlyEquityDecisionStatusResponse}
   * @memberof GetHourlyEquityDecisionStatusResponseResponseData
   */
  data?: GetHourlyEquityDecisionStatusResponse;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityDecisionStatusResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityDecisionStatusResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityDecisionStatusResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetHourlyEquityDecisionStatusResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetHourlyEquityDecisionStrategyPerformanceResponse
 */
export interface GetHourlyEquityDecisionStrategyPerformanceResponse {
  /**
   *
   * @type {Array<HourlyEquityDecisionStrategyPerformanceModel>}
   * @memberof GetHourlyEquityDecisionStrategyPerformanceResponse
   */
  list?: Array<HourlyEquityDecisionStrategyPerformanceModel> | null;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityDecisionStrategyPerformanceResponse
   */
  lastUpdatedDate?: string | null;
}
/**
 *
 * @export
 * @interface GetHourlyEquityDecisionStrategyPerformanceResponseResponseData
 */
export interface GetHourlyEquityDecisionStrategyPerformanceResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityDecisionStrategyPerformanceResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetHourlyEquityDecisionStrategyPerformanceResponse}
   * @memberof GetHourlyEquityDecisionStrategyPerformanceResponseResponseData
   */
  data?: GetHourlyEquityDecisionStrategyPerformanceResponse;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityDecisionStrategyPerformanceResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityDecisionStrategyPerformanceResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityDecisionStrategyPerformanceResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetHourlyEquityDecisionStrategyPerformanceResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetHourlyEquityDrawdownResponse
 */
export interface GetHourlyEquityDrawdownResponse {
  /**
   *
   * @type {Array<HourlyEquityDrawdownModel>}
   * @memberof GetHourlyEquityDrawdownResponse
   */
  list?: Array<HourlyEquityDrawdownModel> | null;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityDrawdownResponse
   */
  lastUpdatedDate?: string | null;
}
/**
 *
 * @export
 * @interface GetHourlyEquityDrawdownResponseResponsePage
 */
export interface GetHourlyEquityDrawdownResponseResponsePage {
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityDrawdownResponseResponsePage
   */
  recordId?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityDrawdownResponseResponsePage
   */
  completed?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetHourlyEquityDrawdownResponseResponsePage
   */
  lastId?: number;
  /**
   *
   * @type {number}
   * @memberof GetHourlyEquityDrawdownResponseResponsePage
   */
  totalRecordCount?: number;
  /**
   *
   * @type {GetHourlyEquityDrawdownResponse}
   * @memberof GetHourlyEquityDrawdownResponseResponsePage
   */
  data?: GetHourlyEquityDrawdownResponse;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityDrawdownResponseResponsePage
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityDrawdownResponseResponsePage
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityDrawdownResponseResponsePage
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetHourlyEquityDrawdownResponseResponsePage
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetHourlyEquityReturnResponse
 */
export interface GetHourlyEquityReturnResponse {
  /**
   *
   * @type {Array<HourlyEquityReturnModel>}
   * @memberof GetHourlyEquityReturnResponse
   */
  list?: Array<HourlyEquityReturnModel> | null;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityReturnResponse
   */
  lastUpdatedDate?: string | null;
}
/**
 *
 * @export
 * @interface GetHourlyEquityReturnResponseResponsePage
 */
export interface GetHourlyEquityReturnResponseResponsePage {
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityReturnResponseResponsePage
   */
  recordId?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityReturnResponseResponsePage
   */
  completed?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetHourlyEquityReturnResponseResponsePage
   */
  lastId?: number;
  /**
   *
   * @type {number}
   * @memberof GetHourlyEquityReturnResponseResponsePage
   */
  totalRecordCount?: number;
  /**
   *
   * @type {GetHourlyEquityReturnResponse}
   * @memberof GetHourlyEquityReturnResponseResponsePage
   */
  data?: GetHourlyEquityReturnResponse;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquityReturnResponseResponsePage
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityReturnResponseResponsePage
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquityReturnResponseResponsePage
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetHourlyEquityReturnResponseResponsePage
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetHourlyEquitySpeedometerGraphicResponse
 */
export interface GetHourlyEquitySpeedometerGraphicResponse {
  /**
   *
   * @type {Array<HourlyEquitySpeedometerGraphicModel>}
   * @memberof GetHourlyEquitySpeedometerGraphicResponse
   */
  list?: Array<HourlyEquitySpeedometerGraphicModel> | null;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquitySpeedometerGraphicResponse
   */
  lastUpdatedDate?: string | null;
}
/**
 *
 * @export
 * @interface GetHourlyEquitySpeedometerGraphicResponseResponseData
 */
export interface GetHourlyEquitySpeedometerGraphicResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquitySpeedometerGraphicResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetHourlyEquitySpeedometerGraphicResponse}
   * @memberof GetHourlyEquitySpeedometerGraphicResponseResponseData
   */
  data?: GetHourlyEquitySpeedometerGraphicResponse;
  /**
   *
   * @type {string}
   * @memberof GetHourlyEquitySpeedometerGraphicResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquitySpeedometerGraphicResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetHourlyEquitySpeedometerGraphicResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetHourlyEquitySpeedometerGraphicResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetInstrumentAnalyzeResponse
 */
export interface GetInstrumentAnalyzeResponse {
  /**
   *
   * @type {Array<InstrumentAnalyzeModel>}
   * @memberof GetInstrumentAnalyzeResponse
   */
  list?: Array<InstrumentAnalyzeModel> | null;
}
/**
 *
 * @export
 * @interface GetInstrumentAnalyzeResponseResponseData
 */
export interface GetInstrumentAnalyzeResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetInstrumentAnalyzeResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetInstrumentAnalyzeResponse}
   * @memberof GetInstrumentAnalyzeResponseResponseData
   */
  data?: GetInstrumentAnalyzeResponse;
  /**
   *
   * @type {string}
   * @memberof GetInstrumentAnalyzeResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetInstrumentAnalyzeResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetInstrumentAnalyzeResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetInstrumentAnalyzeResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetModelPortfolioAnalyzeReponse
 */
export interface GetModelPortfolioAnalyzeReponse {
  /**
   *
   * @type {Array<ModelPortfolioAnalyzeModel>}
   * @memberof GetModelPortfolioAnalyzeReponse
   */
  list?: Array<ModelPortfolioAnalyzeModel> | null;
}
/**
 *
 * @export
 * @interface GetModelPortfolioAnalyzeReponseResponseData
 */
export interface GetModelPortfolioAnalyzeReponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetModelPortfolioAnalyzeReponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetModelPortfolioAnalyzeReponse}
   * @memberof GetModelPortfolioAnalyzeReponseResponseData
   */
  data?: GetModelPortfolioAnalyzeReponse;
  /**
   *
   * @type {string}
   * @memberof GetModelPortfolioAnalyzeReponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetModelPortfolioAnalyzeReponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetModelPortfolioAnalyzeReponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetModelPortfolioAnalyzeReponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetPairDailySignalsP1GraphicResponse
 */
export interface GetPairDailySignalsP1GraphicResponse {
  /**
   *
   * @type {Array<PairDailySignalsP1GraphicModel>}
   * @memberof GetPairDailySignalsP1GraphicResponse
   */
  list?: Array<PairDailySignalsP1GraphicModel> | null;
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsP1GraphicResponse
   */
  lastUpdatedDate?: string | null;
}
/**
 *
 * @export
 * @interface GetPairDailySignalsP1GraphicResponseResponsePage
 */
export interface GetPairDailySignalsP1GraphicResponseResponsePage {
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsP1GraphicResponseResponsePage
   */
  recordId?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetPairDailySignalsP1GraphicResponseResponsePage
   */
  completed?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetPairDailySignalsP1GraphicResponseResponsePage
   */
  lastId?: number;
  /**
   *
   * @type {number}
   * @memberof GetPairDailySignalsP1GraphicResponseResponsePage
   */
  totalRecordCount?: number;
  /**
   *
   * @type {GetPairDailySignalsP1GraphicResponse}
   * @memberof GetPairDailySignalsP1GraphicResponseResponsePage
   */
  data?: GetPairDailySignalsP1GraphicResponse;
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsP1GraphicResponseResponsePage
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetPairDailySignalsP1GraphicResponseResponsePage
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetPairDailySignalsP1GraphicResponseResponsePage
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetPairDailySignalsP1GraphicResponseResponsePage
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetPairDailySignalsP2GraphicResponse
 */
export interface GetPairDailySignalsP2GraphicResponse {
  /**
   *
   * @type {Array<PairDailySignalsP2GraphicModel>}
   * @memberof GetPairDailySignalsP2GraphicResponse
   */
  list?: Array<PairDailySignalsP2GraphicModel> | null;
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsP2GraphicResponse
   */
  lastUpdatedDate?: string | null;
}
/**
 *
 * @export
 * @interface GetPairDailySignalsP2GraphicResponseResponsePage
 */
export interface GetPairDailySignalsP2GraphicResponseResponsePage {
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsP2GraphicResponseResponsePage
   */
  recordId?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetPairDailySignalsP2GraphicResponseResponsePage
   */
  completed?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetPairDailySignalsP2GraphicResponseResponsePage
   */
  lastId?: number;
  /**
   *
   * @type {number}
   * @memberof GetPairDailySignalsP2GraphicResponseResponsePage
   */
  totalRecordCount?: number;
  /**
   *
   * @type {GetPairDailySignalsP2GraphicResponse}
   * @memberof GetPairDailySignalsP2GraphicResponseResponsePage
   */
  data?: GetPairDailySignalsP2GraphicResponse;
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsP2GraphicResponseResponsePage
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetPairDailySignalsP2GraphicResponseResponsePage
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetPairDailySignalsP2GraphicResponseResponsePage
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetPairDailySignalsP2GraphicResponseResponsePage
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetPairDailySignalsResponse
 */
export interface GetPairDailySignalsResponse {
  /**
   *
   * @type {Array<PairDailySignalModel>}
   * @memberof GetPairDailySignalsResponse
   */
  list?: Array<PairDailySignalModel> | null;
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsResponse
   */
  lastUpdateDate?: string | null;
}
/**
 *
 * @export
 * @interface GetPairDailySignalsResponseResponseData
 */
export interface GetPairDailySignalsResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetPairDailySignalsResponse}
   * @memberof GetPairDailySignalsResponseResponseData
   */
  data?: GetPairDailySignalsResponse;
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetPairDailySignalsResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetPairDailySignalsResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetPairDailySignalsResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetPairDailySignalsT1GraphicResponse
 */
export interface GetPairDailySignalsT1GraphicResponse {
  /**
   *
   * @type {Array<PairDailySignalsT1GraphicModel>}
   * @memberof GetPairDailySignalsT1GraphicResponse
   */
  list?: Array<PairDailySignalsT1GraphicModel> | null;
}
/**
 *
 * @export
 * @interface GetPairDailySignalsT1GraphicResponseResponseData
 */
export interface GetPairDailySignalsT1GraphicResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsT1GraphicResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetPairDailySignalsT1GraphicResponse}
   * @memberof GetPairDailySignalsT1GraphicResponseResponseData
   */
  data?: GetPairDailySignalsT1GraphicResponse;
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsT1GraphicResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetPairDailySignalsT1GraphicResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetPairDailySignalsT1GraphicResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetPairDailySignalsT1GraphicResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetPairDailySignalsT2GraphicResponse
 */
export interface GetPairDailySignalsT2GraphicResponse {
  /**
   *
   * @type {Array<PairDailySignalsT2GraphicModel>}
   * @memberof GetPairDailySignalsT2GraphicResponse
   */
  list?: Array<PairDailySignalsT2GraphicModel> | null;
}
/**
 *
 * @export
 * @interface GetPairDailySignalsT2GraphicResponseResponseData
 */
export interface GetPairDailySignalsT2GraphicResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsT2GraphicResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetPairDailySignalsT2GraphicResponse}
   * @memberof GetPairDailySignalsT2GraphicResponseResponseData
   */
  data?: GetPairDailySignalsT2GraphicResponse;
  /**
   *
   * @type {string}
   * @memberof GetPairDailySignalsT2GraphicResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetPairDailySignalsT2GraphicResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetPairDailySignalsT2GraphicResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetPairDailySignalsT2GraphicResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetResearchFilesRequest
 */
export interface GetResearchFilesRequest {
  /**
   *
   * @type {string}
   * @memberof GetResearchFilesRequest
   */
  equityCode?: string | null;
  /**
   *
   * @type {number}
   * @memberof GetResearchFilesRequest
   */
  lastId?: number;
  /**
   *
   * @type {number}
   * @memberof GetResearchFilesRequest
   */
  recordCount?: number;
  /**
   *
   * @type {number}
   * @memberof GetResearchFilesRequest
   */
  pageNumber?: number;
  /**
   *
   * @type {string}
   * @memberof GetResearchFilesRequest
   */
  sortColumnName?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetResearchFilesRequest
   */
  descending?: boolean;
}
/**
 *
 * @export
 * @interface GetSentimentGraphicsResponse
 */
export interface GetSentimentGraphicsResponse {
  /**
   *
   * @type {Array<SentimentGraphicsModel>}
   * @memberof GetSentimentGraphicsResponse
   */
  list?: Array<SentimentGraphicsModel> | null;
}
/**
 *
 * @export
 * @interface GetSentimentGraphicsResponseResponsePage
 */
export interface GetSentimentGraphicsResponseResponsePage {
  /**
   *
   * @type {string}
   * @memberof GetSentimentGraphicsResponseResponsePage
   */
  recordId?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetSentimentGraphicsResponseResponsePage
   */
  completed?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetSentimentGraphicsResponseResponsePage
   */
  lastId?: number;
  /**
   *
   * @type {number}
   * @memberof GetSentimentGraphicsResponseResponsePage
   */
  totalRecordCount?: number;
  /**
   *
   * @type {GetSentimentGraphicsResponse}
   * @memberof GetSentimentGraphicsResponseResponsePage
   */
  data?: GetSentimentGraphicsResponse;
  /**
   *
   * @type {string}
   * @memberof GetSentimentGraphicsResponseResponsePage
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetSentimentGraphicsResponseResponsePage
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetSentimentGraphicsResponseResponsePage
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetSentimentGraphicsResponseResponsePage
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetSentimentLastScoresResponse
 */
export interface GetSentimentLastScoresResponse {
  /**
   *
   * @type {Array<SentimentLastScoresModel>}
   * @memberof GetSentimentLastScoresResponse
   */
  list?: Array<SentimentLastScoresModel> | null;
}
/**
 *
 * @export
 * @interface GetSentimentLastScoresResponseResponseData
 */
export interface GetSentimentLastScoresResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetSentimentLastScoresResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetSentimentLastScoresResponse}
   * @memberof GetSentimentLastScoresResponseResponseData
   */
  data?: GetSentimentLastScoresResponse;
  /**
   *
   * @type {string}
   * @memberof GetSentimentLastScoresResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetSentimentLastScoresResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetSentimentLastScoresResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetSentimentLastScoresResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GetSentimentMomentumAreasResponse
 */
export interface GetSentimentMomentumAreasResponse {
  /**
   *
   * @type {Array<SentimentMomentumAreasModel>}
   * @memberof GetSentimentMomentumAreasResponse
   */
  list?: Array<SentimentMomentumAreasModel> | null;
}
/**
 *
 * @export
 * @interface GetSentimentMomentumAreasResponseResponseData
 */
export interface GetSentimentMomentumAreasResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof GetSentimentMomentumAreasResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {GetSentimentMomentumAreasResponse}
   * @memberof GetSentimentMomentumAreasResponseResponseData
   */
  data?: GetSentimentMomentumAreasResponse;
  /**
   *
   * @type {string}
   * @memberof GetSentimentMomentumAreasResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetSentimentMomentumAreasResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetSentimentMomentumAreasResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof GetSentimentMomentumAreasResponseResponseData
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @interface GraphicDataRequest
 */
export interface GraphicDataRequest {
  /**
   *
   * @type {string}
   * @memberof GraphicDataRequest
   */
  symbol?: string | null;
  /**
   *
   * @type {number}
   * @memberof GraphicDataRequest
   */
  lastId?: number;
}
/**
 *
 * @export
 * @interface HourlyEquityBuySellGraphicModel
 */
export interface HourlyEquityBuySellGraphicModel {
  /**
   *
   * @type {string}
   * @memberof HourlyEquityBuySellGraphicModel
   */
  symbol?: string | null;
  /**
   *
   * @type {string}
   * @memberof HourlyEquityBuySellGraphicModel
   */
  date?: string | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityBuySellGraphicModel
   */
  closePrice?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityBuySellGraphicModel
   */
  closeBuyPrice?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityBuySellGraphicModel
   */
  closeSellPrice?: number | null;
  /**
   *
   * @type {string}
   * @memberof HourlyEquityBuySellGraphicModel
   */
  rateOfChangeBuyDate?: string | null;
  /**
   *
   * @type {string}
   * @memberof HourlyEquityBuySellGraphicModel
   */
  rateOfChangeSellDate?: string | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityBuySellGraphicModel
   */
  decisionPrice?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityBuySellGraphicModel
   */
  rateOfChange?: number | null;
}
/**
 *
 * @export
 * @interface HourlyEquityCumulativeReturnModel
 */
export interface HourlyEquityCumulativeReturnModel {
  /**
   *
   * @type {string}
   * @memberof HourlyEquityCumulativeReturnModel
   */
  symbol?: string | null;
  /**
   *
   * @type {string}
   * @memberof HourlyEquityCumulativeReturnModel
   */
  date?: string | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityCumulativeReturnModel
   */
  closePrice?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityCumulativeReturnModel
   */
  rateOfChangePrice?: number | null;
}
/**
 *
 * @export
 * @interface HourlyEquityDecisionStatusModel
 */
export interface HourlyEquityDecisionStatusModel {
  /**
   *
   * @type {string}
   * @memberof HourlyEquityDecisionStatusModel
   */
  symbol?: string | null;
  /**
   *
   * @type {string}
   * @memberof HourlyEquityDecisionStatusModel
   */
  decisionDate?: string | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityDecisionStatusModel
   */
  signalPrice?: number | null;
  /**
   *
   * @type {string}
   * @memberof HourlyEquityDecisionStatusModel
   */
  decision?: string | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityDecisionStatusModel
   */
  priceNow?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityDecisionStatusModel
   */
  profit?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof HourlyEquityDecisionStatusModel
   */
  hasViopContract?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof HourlyEquityDecisionStatusModel
   */
  isFuture?: boolean;
}
/**
 *
 * @export
 * @interface HourlyEquityDecisionStrategyPerformanceModel
 */
export interface HourlyEquityDecisionStrategyPerformanceModel {
  /**
   *
   * @type {string}
   * @memberof HourlyEquityDecisionStrategyPerformanceModel
   */
  symbol?: string | null;
  /**
   *
   * @type {string}
   * @memberof HourlyEquityDecisionStrategyPerformanceModel
   */
  decision?: string | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityDecisionStrategyPerformanceModel
   */
  totalIncome?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityDecisionStrategyPerformanceModel
   */
  positionCount?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityDecisionStrategyPerformanceModel
   */
  averageIncome?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityDecisionStrategyPerformanceModel
   */
  deflectionIncome?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityDecisionStrategyPerformanceModel
   */
  score?: number | null;
}
/**
 *
 * @export
 * @interface HourlyEquityDrawdownModel
 */
export interface HourlyEquityDrawdownModel {
  /**
   *
   * @type {string}
   * @memberof HourlyEquityDrawdownModel
   */
  symbol?: string | null;
  /**
   *
   * @type {string}
   * @memberof HourlyEquityDrawdownModel
   */
  date?: string | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityDrawdownModel
   */
  closePrice?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityDrawdownModel
   */
  rateOfChangePrice?: number | null;
}
/**
 *
 * @export
 * @interface HourlyEquityReturnModel
 */
export interface HourlyEquityReturnModel {
  /**
   *
   * @type {string}
   * @memberof HourlyEquityReturnModel
   */
  symbol?: string | null;
  /**
   *
   * @type {string}
   * @memberof HourlyEquityReturnModel
   */
  date?: string | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityReturnModel
   */
  closePrice?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquityReturnModel
   */
  rateOfChangePrice?: number | null;
}
/**
 *
 * @export
 * @interface HourlyEquitySpeedometerGraphicModel
 */
export interface HourlyEquitySpeedometerGraphicModel {
  /**
   *
   * @type {number}
   * @memberof HourlyEquitySpeedometerGraphicModel
   */
  currentDay?: number | null;
  /**
   *
   * @type {string}
   * @memberof HourlyEquitySpeedometerGraphicModel
   */
  symbol?: string | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquitySpeedometerGraphicModel
   */
  previousDay?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquitySpeedometerGraphicModel
   */
  score?: number | null;
  /**
   *
   * @type {number}
   * @memberof HourlyEquitySpeedometerGraphicModel
   */
  priority?: number | null;
}
/**
 *
 * @export
 * @interface InstrumentAnalyzeModel
 */
export interface InstrumentAnalyzeModel {
  /**
   *
   * @type {string}
   * @memberof InstrumentAnalyzeModel
   */
  symbol?: string | null;
  /**
   *
   * @type {string}
   * @memberof InstrumentAnalyzeModel
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof InstrumentAnalyzeModel
   */
  lastPrice?: number;
  /**
   *
   * @type {string}
   * @memberof InstrumentAnalyzeModel
   */
  priceChangeRate?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof InstrumentAnalyzeModel
   */
  includesResearchScope?: boolean;
  /**
   *
   * @type {string}
   * @memberof InstrumentAnalyzeModel
   */
  decision?: string | null;
}
/**
 *
 * @export
 * @interface InstrumentAnalyzeRequest
 */
export interface InstrumentAnalyzeRequest {
  /**
   *
   * @type {string}
   * @memberof InstrumentAnalyzeRequest
   */
  symbol?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof InstrumentAnalyzeRequest
   */
  includesResearchScope?: boolean | null;
}
/**
 *
 * @export
 * @interface ListResearchFilesResponse
 */
export interface ListResearchFilesResponse {
  /**
   *
   * @type {Array<ResearchFileModel>}
   * @memberof ListResearchFilesResponse
   */
  researchFileList?: Array<ResearchFileModel> | null;
}
/**
 *
 * @export
 * @interface ListResearchFilesResponseResponsePage
 */
export interface ListResearchFilesResponseResponsePage {
  /**
   *
   * @type {string}
   * @memberof ListResearchFilesResponseResponsePage
   */
  recordId?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof ListResearchFilesResponseResponsePage
   */
  completed?: boolean;
  /**
   *
   * @type {number}
   * @memberof ListResearchFilesResponseResponsePage
   */
  lastId?: number;
  /**
   *
   * @type {number}
   * @memberof ListResearchFilesResponseResponsePage
   */
  totalRecordCount?: number;
  /**
   *
   * @type {ListResearchFilesResponse}
   * @memberof ListResearchFilesResponseResponsePage
   */
  data?: ListResearchFilesResponse;
  /**
   *
   * @type {string}
   * @memberof ListResearchFilesResponseResponsePage
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof ListResearchFilesResponseResponsePage
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ListResearchFilesResponseResponsePage
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof ListResearchFilesResponseResponsePage
   */
  error?: ErrorModel;
}
/**
 *
 * @export
 * @enum {string}
 */

export const LoginNextStep = {
  LoginCompleted: 'LoginCompleted',
  ApproveSms: 'ApproveSms',
  FirstLoginPassChange: 'FirstLoginPassChange',
  PasswordExpired: 'PasswordExpired',
  ForgotPasswordApproveSms: 'ForgotPasswordApproveSms',
  ForgotPasswordChangePassword: 'ForgotPasswordChangePassword',
  PublicAuth: 'PublicAuth',
  RefreshToken: 'RefreshToken',
  TokenExpired: 'TokenExpired',
  Undefined: 'Undefined',
} as const;

export type LoginNextStep = (typeof LoginNextStep)[keyof typeof LoginNextStep];

/**
 *
 * @export
 * @interface ModelPortfolioAnalyzeModel
 */
export interface ModelPortfolioAnalyzeModel {
  /**
   *
   * @type {string}
   * @memberof ModelPortfolioAnalyzeModel
   */
  symbol?: string | null;
  /**
   *
   * @type {number}
   * @memberof ModelPortfolioAnalyzeModel
   */
  lastPrice?: number;
  /**
   *
   * @type {number}
   * @memberof ModelPortfolioAnalyzeModel
   */
  targetPrice?: number;
  /**
   *
   * @type {number}
   * @memberof ModelPortfolioAnalyzeModel
   */
  fk?: number;
  /**
   *
   * @type {number}
   * @memberof ModelPortfolioAnalyzeModel
   */
  fdd?: number;
}
/**
 *
 * @export
 * @enum {string}
 */

export const MomentumArea = {
  NegativeStrongMomentum: 'NegativeStrongMomentum',
  NegativeMomentum: 'NegativeMomentum',
  Neutral: 'Neutral',
  PositiveMomentum: 'PositiveMomentum',
  PositiveStrongMomentum: 'PositiveStrongMomentum',
  Undefined: 'Undefined',
} as const;

export type MomentumArea = (typeof MomentumArea)[keyof typeof MomentumArea];

/**
 *
 * @export
 * @interface PairDailySignalModel
 */
export interface PairDailySignalModel {
  /**
   *
   * @type {number}
   * @memberof PairDailySignalModel
   */
  pairDailySignalId?: number;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalModel
   */
  short?: string | null;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalModel
   */
  long?: string | null;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalModel
   */
  decisionDate?: string;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalModel
   */
  shortDecisionPrice?: number;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalModel
   */
  longDecisionPrice?: number;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalModel
   */
  shortChange?: number;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalModel
   */
  longChange?: number;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalModel
   */
  proLoss?: number;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalModel
   */
  positionCloseDate?: string | null;
}
/**
 *
 * @export
 * @interface PairDailySignalRequest
 */
export interface PairDailySignalRequest {
  /**
   *
   * @type {number}
   * @memberof PairDailySignalRequest
   */
  pairDailySignalId?: number;
  /**
   *
   * @type {boolean}
   * @memberof PairDailySignalRequest
   */
  isClosePosition?: boolean;
}
/**
 *
 * @export
 * @interface PairDailySignalsP1GraphicModel
 */
export interface PairDailySignalsP1GraphicModel {
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsP1GraphicModel
   */
  pairDailySignalId?: number;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalsP1GraphicModel
   */
  date?: string;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsP1GraphicModel
   */
  short?: number;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsP1GraphicModel
   */
  long?: number;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalsP1GraphicModel
   */
  colorShort?: string | null;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalsP1GraphicModel
   */
  colorLong?: string | null;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsP1GraphicModel
   */
  return?: number;
}
/**
 *
 * @export
 * @interface PairDailySignalsP2GraphicModel
 */
export interface PairDailySignalsP2GraphicModel {
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsP2GraphicModel
   */
  pairDailySignalId?: number;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalsP2GraphicModel
   */
  date?: string;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsP2GraphicModel
   */
  short?: number;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsP2GraphicModel
   */
  long?: number;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsP2GraphicModel
   */
  totalReturn?: number;
}
/**
 *
 * @export
 * @interface PairDailySignalsT1GraphicModel
 */
export interface PairDailySignalsT1GraphicModel {
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsT1GraphicModel
   */
  pairDailySignalId?: number;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalsT1GraphicModel
   */
  method?: string | null;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsT1GraphicModel
   */
  countOfOrders?: number;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsT1GraphicModel
   */
  sumOfOrders?: number;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalsT1GraphicModel
   */
  createdDate?: string;
}
/**
 *
 * @export
 * @interface PairDailySignalsT2GraphicModel
 */
export interface PairDailySignalsT2GraphicModel {
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsT2GraphicModel
   */
  pairDailySignalId?: number;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalsT2GraphicModel
   */
  direction?: string | null;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalsT2GraphicModel
   */
  stockSymbol?: string | null;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsT2GraphicModel
   */
  positionOpenPrice?: number;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsT2GraphicModel
   */
  positionClosePrice?: number;
  /**
   *
   * @type {number}
   * @memberof PairDailySignalsT2GraphicModel
   */
  proLoss?: number;
  /**
   *
   * @type {string}
   * @memberof PairDailySignalsT2GraphicModel
   */
  createdDate?: string;
}
/**
 *
 * @export
 * @interface PairSymSpecRequest
 */
export interface PairSymSpecRequest {
  /**
   *
   * @type {number}
   * @memberof PairSymSpecRequest
   */
  pairDailySignalId?: number;
  /**
   *
   * @type {number}
   * @memberof PairSymSpecRequest
   */
  lastId?: number;
}
/**
 *
 * @export
 * @interface RefreshTokensModel
 */
export interface RefreshTokensModel {
  /**
   *
   * @type {string}
   * @memberof RefreshTokensModel
   */
  token?: string | null;
  /**
   *
   * @type {number}
   * @memberof RefreshTokensModel
   */
  validMinutes?: number;
  /**
   *
   * @type {string}
   * @memberof RefreshTokensModel
   */
  validTime?: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export const ResearchBulletinReportType = {
  TechnicalBulletin: 'TechnicalBulletin',
  ViopDailyBulletin: 'ViopDailyBulletin',
  DailyBulletin: 'DailyBulletin',
  TreasuryDailyBulletin: 'TreasuryDailyBulletin',
  ValueTable: 'ValueTable',
} as const;

export type ResearchBulletinReportType =
  (typeof ResearchBulletinReportType)[keyof typeof ResearchBulletinReportType];

/**
 *
 * @export
 * @interface ResearchFileModel
 */
export interface ResearchFileModel {
  /**
   *
   * @type {number}
   * @memberof ResearchFileModel
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResearchFileModel
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof ResearchFileModel
   */
  equityCode?: string | null;
  /**
   *
   * @type {string}
   * @memberof ResearchFileModel
   */
  fileName?: string | null;
  /**
   *
   * @type {string}
   * @memberof ResearchFileModel
   */
  webSiteUrl?: string | null;
  /**
   *
   * @type {number}
   * @memberof ResearchFileModel
   */
  reportMonth?: number;
  /**
   *
   * @type {number}
   * @memberof ResearchFileModel
   */
  reportYear?: number;
  /**
   *
   * @type {string}
   * @memberof ResearchFileModel
   */
  reportType?: string | null;
  /**
   *
   * @type {string}
   * @memberof ResearchFileModel
   */
  createdDate?: string;
}
/**
 *
 * @export
 * @interface SentimentGraphicsModel
 */
export interface SentimentGraphicsModel {
  /**
   *
   * @type {string}
   * @memberof SentimentGraphicsModel
   */
  symbol?: string | null;
  /**
   *
   * @type {string}
   * @memberof SentimentGraphicsModel
   */
  date?: string | null;
  /**
   *
   * @type {number}
   * @memberof SentimentGraphicsModel
   */
  closePrice?: number | null;
  /**
   *
   * @type {string}
   * @memberof SentimentGraphicsModel
   */
  color?: string | null;
  /**
   *
   * @type {string}
   * @memberof SentimentGraphicsModel
   */
  yAxisDate?: string | null;
  /**
   *
   * @type {string}
   * @memberof SentimentGraphicsModel
   */
  yAxisColor?: string | null;
  /**
   *
   * @type {string}
   * @memberof SentimentGraphicsModel
   */
  created?: string | null;
  /**
   *
   * @type {number}
   * @memberof SentimentGraphicsModel
   */
  score?: number | null;
}
/**
 *
 * @export
 * @interface SentimentLastScoresModel
 */
export interface SentimentLastScoresModel {
  /**
   *
   * @type {string}
   * @memberof SentimentLastScoresModel
   */
  symbol?: string | null;
  /**
   *
   * @type {string}
   * @memberof SentimentLastScoresModel
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof SentimentLastScoresModel
   */
  date?: string | null;
  /**
   *
   * @type {number}
   * @memberof SentimentLastScoresModel
   */
  closePrice?: number | null;
  /**
   *
   * @type {number}
   * @memberof SentimentLastScoresModel
   */
  score?: number | null;
  /**
   *
   * @type {number}
   * @memberof SentimentLastScoresModel
   */
  lastPrice?: number;
  /**
   *
   * @type {string}
   * @memberof SentimentLastScoresModel
   */
  priceChangeRate?: string | null;
  /**
   *
   * @type {string}
   * @memberof SentimentLastScoresModel
   */
  decision?: string | null;
  /**
   *
   * @type {MomentumArea}
   * @memberof SentimentLastScoresModel
   */
  momentumArea?: MomentumArea;
  /**
   *
   * @type {string}
   * @memberof SentimentLastScoresModel
   */
  created?: string | null;
}
/**
 *
 * @export
 * @interface SentimentMomentumAreasModel
 */
export interface SentimentMomentumAreasModel {
  /**
   *
   * @type {string}
   * @memberof SentimentMomentumAreasModel
   */
  momentumAreaName?: string | null;
  /**
   *
   * @type {number}
   * @memberof SentimentMomentumAreasModel
   */
  momentumValue?: number | null;
  /**
   *
   * @type {string}
   * @memberof SentimentMomentumAreasModel
   */
  momentumPercentage?: string | null;
  /**
   *
   * @type {number}
   * @memberof SentimentMomentumAreasModel
   */
  priority?: number | null;
  /**
   *
   * @type {string}
   * @memberof SentimentMomentumAreasModel
   */
  created?: string | null;
}
/**
 *
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
  /**
   *
   * @type {string}
   * @memberof TokenResponse
   */
  accessToken?: string | null;
  /**
   *
   * @type {LoginNextStep}
   * @memberof TokenResponse
   */
  loginNextStep?: LoginNextStep;
  /**
   *
   * @type {number}
   * @memberof TokenResponse
   */
  validMinutes?: number;
  /**
   *
   * @type {string}
   * @memberof TokenResponse
   */
  validTime?: string;
  /**
   *
   * @type {RefreshTokensModel}
   * @memberof TokenResponse
   */
  refreshToken?: RefreshTokensModel;
  /**
   *
   * @type {string}
   * @memberof TokenResponse
   */
  smsExpireAt?: string | null;
  /**
   *
   * @type {number}
   * @memberof TokenResponse
   */
  remainSmsCount?: number | null;
}
/**
 *
 * @export
 * @interface TokenResponseResponseData
 */
export interface TokenResponseResponseData {
  /**
   *
   * @type {string}
   * @memberof TokenResponseResponseData
   */
  recordId?: string | null;
  /**
   *
   * @type {TokenResponse}
   * @memberof TokenResponseResponseData
   */
  data?: TokenResponse;
  /**
   *
   * @type {string}
   * @memberof TokenResponseResponseData
   */
  message?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof TokenResponseResponseData
   */
  success?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof TokenResponseResponseData
   */
  businessSuccess?: boolean;
  /**
   *
   * @type {ErrorModel}
   * @memberof TokenResponseResponseData
   */
  error?: ErrorModel;
}

/**
 * ResearchApi - axios parameter creator
 * @export
 */
export const ResearchApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiResearchGetBulletinFilesPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Research/GetBulletinFiles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiResearchGetCommentOfDayPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Research/GetCommentOfDay`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {GetResearchFilesRequest} [getResearchFilesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiResearchGetResearchFilesPost: async (
      getResearchFilesRequest?: GetResearchFilesRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Research/GetResearchFiles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        getResearchFilesRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ResearchApi - functional programming interface
 * @export
 */
export const ResearchApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ResearchApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiResearchGetBulletinFilesPost(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetBulletinFilesResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiResearchGetBulletinFilesPost(
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiResearchGetCommentOfDayPost(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetCommentOfDayResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiResearchGetCommentOfDayPost(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {GetResearchFilesRequest} [getResearchFilesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiResearchGetResearchFilesPost(
      getResearchFilesRequest?: GetResearchFilesRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ListResearchFilesResponseResponsePage>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiResearchGetResearchFilesPost(
          getResearchFilesRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * ResearchApi - factory interface
 * @export
 */
export const ResearchApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ResearchApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiResearchGetBulletinFilesPost(
      options?: any,
    ): AxiosPromise<GetBulletinFilesResponseResponseData> {
      return localVarFp
        .apiResearchGetBulletinFilesPost(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiResearchGetCommentOfDayPost(
      options?: any,
    ): AxiosPromise<GetCommentOfDayResponseResponseData> {
      return localVarFp
        .apiResearchGetCommentOfDayPost(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {GetResearchFilesRequest} [getResearchFilesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiResearchGetResearchFilesPost(
      getResearchFilesRequest?: GetResearchFilesRequest,
      options?: any,
    ): AxiosPromise<ListResearchFilesResponseResponsePage> {
      return localVarFp
        .apiResearchGetResearchFilesPost(getResearchFilesRequest, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * ResearchApi - object-oriented interface
 * @export
 * @class ResearchApi
 * @extends {BaseAPI}
 */
export class ResearchApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResearchApi
   */
  public apiResearchGetBulletinFilesPost(options?: AxiosRequestConfig) {
    return ResearchApiFp(this.configuration)
      .apiResearchGetBulletinFilesPost(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResearchApi
   */
  public apiResearchGetCommentOfDayPost(options?: AxiosRequestConfig) {
    return ResearchApiFp(this.configuration)
      .apiResearchGetCommentOfDayPost(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {GetResearchFilesRequest} [getResearchFilesRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResearchApi
   */
  public apiResearchGetResearchFilesPost(
    getResearchFilesRequest?: GetResearchFilesRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResearchApiFp(this.configuration)
      .apiResearchGetResearchFilesPost(getResearchFilesRequest, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * SentimentApi - axios parameter creator
 * @export
 */
export const SentimentApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSentimentGetSentimentGraphicsPost: async (
      graphicDataRequest?: GraphicDataRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Sentiment/GetSentimentGraphics`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        graphicDataRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [symbol]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSentimentGetSentimentLastScoresPost: async (
      symbol?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Sentiment/GetSentimentLastScores`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      if (symbol !== undefined) {
        localVarQueryParameter['symbol'] = symbol;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSentimentGetSentimentMomentumAreasPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Sentiment/GetSentimentMomentumAreas`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SentimentApi - functional programming interface
 * @export
 */
export const SentimentApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    SentimentApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSentimentGetSentimentGraphicsPost(
      graphicDataRequest?: GraphicDataRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetSentimentGraphicsResponseResponsePage>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSentimentGetSentimentGraphicsPost(
          graphicDataRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [symbol]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSentimentGetSentimentLastScoresPost(
      symbol?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetSentimentLastScoresResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSentimentGetSentimentLastScoresPost(
          symbol,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSentimentGetSentimentMomentumAreasPost(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetSentimentMomentumAreasResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSentimentGetSentimentMomentumAreasPost(
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * SentimentApi - factory interface
 * @export
 */
export const SentimentApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SentimentApiFp(configuration);
  return {
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSentimentGetSentimentGraphicsPost(
      graphicDataRequest?: GraphicDataRequest,
      options?: any,
    ): AxiosPromise<GetSentimentGraphicsResponseResponsePage> {
      return localVarFp
        .apiSentimentGetSentimentGraphicsPost(graphicDataRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} [symbol]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSentimentGetSentimentLastScoresPost(
      symbol?: string,
      options?: any,
    ): AxiosPromise<GetSentimentLastScoresResponseResponseData> {
      return localVarFp
        .apiSentimentGetSentimentLastScoresPost(symbol, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSentimentGetSentimentMomentumAreasPost(
      options?: any,
    ): AxiosPromise<GetSentimentMomentumAreasResponseResponseData> {
      return localVarFp
        .apiSentimentGetSentimentMomentumAreasPost(options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * SentimentApi - object-oriented interface
 * @export
 * @class SentimentApi
 * @extends {BaseAPI}
 */
export class SentimentApi extends BaseAPI {
  /**
   *
   * @param {GraphicDataRequest} [graphicDataRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SentimentApi
   */
  public apiSentimentGetSentimentGraphicsPost(
    graphicDataRequest?: GraphicDataRequest,
    options?: AxiosRequestConfig,
  ) {
    return SentimentApiFp(this.configuration)
      .apiSentimentGetSentimentGraphicsPost(graphicDataRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [symbol]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SentimentApi
   */
  public apiSentimentGetSentimentLastScoresPost(
    symbol?: string,
    options?: AxiosRequestConfig,
  ) {
    return SentimentApiFp(this.configuration)
      .apiSentimentGetSentimentLastScoresPost(symbol, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SentimentApi
   */
  public apiSentimentGetSentimentMomentumAreasPost(
    options?: AxiosRequestConfig,
  ) {
    return SentimentApiFp(this.configuration)
      .apiSentimentGetSentimentMomentumAreasPost(options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * SettingApi - axios parameter creator
 * @export
 */
export const SettingApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {InstrumentAnalyzeRequest} [instrumentAnalyzeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSettingGetInstrumentAnalyzePost: async (
      instrumentAnalyzeRequest?: InstrumentAnalyzeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Setting/GetInstrumentAnalyze`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        instrumentAnalyzeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [symbol]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSettingGetModelPortfolioAnalyzePost: async (
      symbol?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Setting/GetModelPortfolioAnalyze`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      if (symbol !== undefined) {
        localVarQueryParameter['symbol'] = symbol;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SettingApi - functional programming interface
 * @export
 */
export const SettingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SettingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {InstrumentAnalyzeRequest} [instrumentAnalyzeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSettingGetInstrumentAnalyzePost(
      instrumentAnalyzeRequest?: InstrumentAnalyzeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetInstrumentAnalyzeResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSettingGetInstrumentAnalyzePost(
          instrumentAnalyzeRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [symbol]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSettingGetModelPortfolioAnalyzePost(
      symbol?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetModelPortfolioAnalyzeReponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSettingGetModelPortfolioAnalyzePost(
          symbol,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * SettingApi - factory interface
 * @export
 */
export const SettingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SettingApiFp(configuration);
  return {
    /**
     *
     * @param {InstrumentAnalyzeRequest} [instrumentAnalyzeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSettingGetInstrumentAnalyzePost(
      instrumentAnalyzeRequest?: InstrumentAnalyzeRequest,
      options?: any,
    ): AxiosPromise<GetInstrumentAnalyzeResponseResponseData> {
      return localVarFp
        .apiSettingGetInstrumentAnalyzePost(instrumentAnalyzeRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} [symbol]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSettingGetModelPortfolioAnalyzePost(
      symbol?: string,
      options?: any,
    ): AxiosPromise<GetModelPortfolioAnalyzeReponseResponseData> {
      return localVarFp
        .apiSettingGetModelPortfolioAnalyzePost(symbol, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * SettingApi - object-oriented interface
 * @export
 * @class SettingApi
 * @extends {BaseAPI}
 */
export class SettingApi extends BaseAPI {
  /**
   *
   * @param {InstrumentAnalyzeRequest} [instrumentAnalyzeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingApi
   */
  public apiSettingGetInstrumentAnalyzePost(
    instrumentAnalyzeRequest?: InstrumentAnalyzeRequest,
    options?: AxiosRequestConfig,
  ) {
    return SettingApiFp(this.configuration)
      .apiSettingGetInstrumentAnalyzePost(instrumentAnalyzeRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [symbol]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingApi
   */
  public apiSettingGetModelPortfolioAnalyzePost(
    symbol?: string,
    options?: AxiosRequestConfig,
  ) {
    return SettingApiFp(this.configuration)
      .apiSettingGetModelPortfolioAnalyzePost(symbol, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * SignalApi - axios parameter creator
 * @export
 */
export const SignalApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetApprovedDailySignalStrategiesPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetApprovedDailySignalStrategies`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetApprovedHourlySignalStrategiesPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetApprovedHourlySignalStrategies`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetDailyScanningGraphicsPost: async (
      graphicDataRequest?: GraphicDataRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetDailyScanningGraphics`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        graphicDataRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {EquitySignalRequest} [equitySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetDailyScanningSignalsPost: async (
      equitySignalRequest?: EquitySignalRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetDailyScanningSignals`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        equitySignalRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquityBuySellGraphicPost: async (
      graphicDataRequest?: GraphicDataRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetHourlyEquityBuySellGraphic`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        graphicDataRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquityCumulativeReturnPost: async (
      graphicDataRequest?: GraphicDataRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetHourlyEquityCumulativeReturn`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        graphicDataRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {EquitySignalRequest} [equitySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquityDecisionStatusPost: async (
      equitySignalRequest?: EquitySignalRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetHourlyEquityDecisionStatus`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        equitySignalRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {EquitySignalRequest} [equitySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquityDecisionStrategyPerformancePost: async (
      equitySignalRequest?: EquitySignalRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetHourlyEquityDecisionStrategyPerformance`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        equitySignalRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquityDrawdownPost: async (
      graphicDataRequest?: GraphicDataRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetHourlyEquityDrawdown`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        graphicDataRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquityReturnPost: async (
      graphicDataRequest?: GraphicDataRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetHourlyEquityReturn`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        graphicDataRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {EquitySignalRequest} [equitySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquitySpeedometerGraphicPost: async (
      equitySignalRequest?: EquitySignalRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetHourlyEquitySpeedometerGraphic`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        equitySignalRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PairSymSpecRequest} [pairSymSpecRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetPairDailySignalsP1GraphicPost: async (
      pairSymSpecRequest?: PairSymSpecRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetPairDailySignalsP1Graphic`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        pairSymSpecRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PairSymSpecRequest} [pairSymSpecRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetPairDailySignalsP2GraphicPost: async (
      pairSymSpecRequest?: PairSymSpecRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetPairDailySignalsP2Graphic`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        pairSymSpecRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PairDailySignalRequest} [pairDailySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetPairDailySignalsPost: async (
      pairDailySignalRequest?: PairDailySignalRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetPairDailySignals`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        pairDailySignalRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [pairDailySignalId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetPairDailySignalsT1GraphicPost: async (
      pairDailySignalId?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetPairDailySignalsT1Graphic`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      if (pairDailySignalId !== undefined) {
        localVarQueryParameter['pairDailySignalId'] = pairDailySignalId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [pairDailySignalId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetPairDailySignalsT2GraphicPost: async (
      pairDailySignalId?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Signal/GetPairDailySignalsT2Graphic`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      if (pairDailySignalId !== undefined) {
        localVarQueryParameter['pairDailySignalId'] = pairDailySignalId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SignalApi - functional programming interface
 * @export
 */
export const SignalApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SignalApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetApprovedDailySignalStrategiesPost(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetApprovedDailySignalStrategiesResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetApprovedDailySignalStrategiesPost(
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetApprovedHourlySignalStrategiesPost(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetApprovedHourlySignalStrategiesResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetApprovedHourlySignalStrategiesPost(
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetDailyScanningGraphicsPost(
      graphicDataRequest?: GraphicDataRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetDailyScanningGraphicsResponseResponsePage>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetDailyScanningGraphicsPost(
          graphicDataRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {EquitySignalRequest} [equitySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetDailyScanningSignalsPost(
      equitySignalRequest?: EquitySignalRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetDailyScanningSignalsResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetDailyScanningSignalsPost(
          equitySignalRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetHourlyEquityBuySellGraphicPost(
      graphicDataRequest?: GraphicDataRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetHourlyEquityBuySellGraphicResponseResponsePage>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetHourlyEquityBuySellGraphicPost(
          graphicDataRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetHourlyEquityCumulativeReturnPost(
      graphicDataRequest?: GraphicDataRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetHourlyEquityCumulativeReturnResponseResponsePage>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetHourlyEquityCumulativeReturnPost(
          graphicDataRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {EquitySignalRequest} [equitySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetHourlyEquityDecisionStatusPost(
      equitySignalRequest?: EquitySignalRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetHourlyEquityDecisionStatusResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetHourlyEquityDecisionStatusPost(
          equitySignalRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {EquitySignalRequest} [equitySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetHourlyEquityDecisionStrategyPerformancePost(
      equitySignalRequest?: EquitySignalRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetHourlyEquityDecisionStrategyPerformanceResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetHourlyEquityDecisionStrategyPerformancePost(
          equitySignalRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetHourlyEquityDrawdownPost(
      graphicDataRequest?: GraphicDataRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetHourlyEquityDrawdownResponseResponsePage>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetHourlyEquityDrawdownPost(
          graphicDataRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetHourlyEquityReturnPost(
      graphicDataRequest?: GraphicDataRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetHourlyEquityReturnResponseResponsePage>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetHourlyEquityReturnPost(
          graphicDataRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {EquitySignalRequest} [equitySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetHourlyEquitySpeedometerGraphicPost(
      equitySignalRequest?: EquitySignalRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetHourlyEquitySpeedometerGraphicResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetHourlyEquitySpeedometerGraphicPost(
          equitySignalRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {PairSymSpecRequest} [pairSymSpecRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetPairDailySignalsP1GraphicPost(
      pairSymSpecRequest?: PairSymSpecRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetPairDailySignalsP1GraphicResponseResponsePage>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetPairDailySignalsP1GraphicPost(
          pairSymSpecRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {PairSymSpecRequest} [pairSymSpecRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetPairDailySignalsP2GraphicPost(
      pairSymSpecRequest?: PairSymSpecRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetPairDailySignalsP2GraphicResponseResponsePage>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetPairDailySignalsP2GraphicPost(
          pairSymSpecRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {PairDailySignalRequest} [pairDailySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetPairDailySignalsPost(
      pairDailySignalRequest?: PairDailySignalRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetPairDailySignalsResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetPairDailySignalsPost(
          pairDailySignalRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} [pairDailySignalId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetPairDailySignalsT1GraphicPost(
      pairDailySignalId?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetPairDailySignalsT1GraphicResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetPairDailySignalsT1GraphicPost(
          pairDailySignalId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} [pairDailySignalId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSignalGetPairDailySignalsT2GraphicPost(
      pairDailySignalId?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetPairDailySignalsT2GraphicResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSignalGetPairDailySignalsT2GraphicPost(
          pairDailySignalId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * SignalApi - factory interface
 * @export
 */
export const SignalApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SignalApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetApprovedDailySignalStrategiesPost(
      options?: any,
    ): AxiosPromise<GetApprovedDailySignalStrategiesResponseResponseData> {
      return localVarFp
        .apiSignalGetApprovedDailySignalStrategiesPost(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetApprovedHourlySignalStrategiesPost(
      options?: any,
    ): AxiosPromise<GetApprovedHourlySignalStrategiesResponseResponseData> {
      return localVarFp
        .apiSignalGetApprovedHourlySignalStrategiesPost(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetDailyScanningGraphicsPost(
      graphicDataRequest?: GraphicDataRequest,
      options?: any,
    ): AxiosPromise<GetDailyScanningGraphicsResponseResponsePage> {
      return localVarFp
        .apiSignalGetDailyScanningGraphicsPost(graphicDataRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {EquitySignalRequest} [equitySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetDailyScanningSignalsPost(
      equitySignalRequest?: EquitySignalRequest,
      options?: any,
    ): AxiosPromise<GetDailyScanningSignalsResponseResponseData> {
      return localVarFp
        .apiSignalGetDailyScanningSignalsPost(equitySignalRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquityBuySellGraphicPost(
      graphicDataRequest?: GraphicDataRequest,
      options?: any,
    ): AxiosPromise<GetHourlyEquityBuySellGraphicResponseResponsePage> {
      return localVarFp
        .apiSignalGetHourlyEquityBuySellGraphicPost(graphicDataRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquityCumulativeReturnPost(
      graphicDataRequest?: GraphicDataRequest,
      options?: any,
    ): AxiosPromise<GetHourlyEquityCumulativeReturnResponseResponsePage> {
      return localVarFp
        .apiSignalGetHourlyEquityCumulativeReturnPost(
          graphicDataRequest,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {EquitySignalRequest} [equitySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquityDecisionStatusPost(
      equitySignalRequest?: EquitySignalRequest,
      options?: any,
    ): AxiosPromise<GetHourlyEquityDecisionStatusResponseResponseData> {
      return localVarFp
        .apiSignalGetHourlyEquityDecisionStatusPost(
          equitySignalRequest,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {EquitySignalRequest} [equitySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquityDecisionStrategyPerformancePost(
      equitySignalRequest?: EquitySignalRequest,
      options?: any,
    ): AxiosPromise<GetHourlyEquityDecisionStrategyPerformanceResponseResponseData> {
      return localVarFp
        .apiSignalGetHourlyEquityDecisionStrategyPerformancePost(
          equitySignalRequest,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquityDrawdownPost(
      graphicDataRequest?: GraphicDataRequest,
      options?: any,
    ): AxiosPromise<GetHourlyEquityDrawdownResponseResponsePage> {
      return localVarFp
        .apiSignalGetHourlyEquityDrawdownPost(graphicDataRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {GraphicDataRequest} [graphicDataRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquityReturnPost(
      graphicDataRequest?: GraphicDataRequest,
      options?: any,
    ): AxiosPromise<GetHourlyEquityReturnResponseResponsePage> {
      return localVarFp
        .apiSignalGetHourlyEquityReturnPost(graphicDataRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {EquitySignalRequest} [equitySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetHourlyEquitySpeedometerGraphicPost(
      equitySignalRequest?: EquitySignalRequest,
      options?: any,
    ): AxiosPromise<GetHourlyEquitySpeedometerGraphicResponseResponseData> {
      return localVarFp
        .apiSignalGetHourlyEquitySpeedometerGraphicPost(
          equitySignalRequest,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {PairSymSpecRequest} [pairSymSpecRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetPairDailySignalsP1GraphicPost(
      pairSymSpecRequest?: PairSymSpecRequest,
      options?: any,
    ): AxiosPromise<GetPairDailySignalsP1GraphicResponseResponsePage> {
      return localVarFp
        .apiSignalGetPairDailySignalsP1GraphicPost(pairSymSpecRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {PairSymSpecRequest} [pairSymSpecRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetPairDailySignalsP2GraphicPost(
      pairSymSpecRequest?: PairSymSpecRequest,
      options?: any,
    ): AxiosPromise<GetPairDailySignalsP2GraphicResponseResponsePage> {
      return localVarFp
        .apiSignalGetPairDailySignalsP2GraphicPost(pairSymSpecRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {PairDailySignalRequest} [pairDailySignalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetPairDailySignalsPost(
      pairDailySignalRequest?: PairDailySignalRequest,
      options?: any,
    ): AxiosPromise<GetPairDailySignalsResponseResponseData> {
      return localVarFp
        .apiSignalGetPairDailySignalsPost(pairDailySignalRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {number} [pairDailySignalId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetPairDailySignalsT1GraphicPost(
      pairDailySignalId?: number,
      options?: any,
    ): AxiosPromise<GetPairDailySignalsT1GraphicResponseResponseData> {
      return localVarFp
        .apiSignalGetPairDailySignalsT1GraphicPost(pairDailySignalId, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {number} [pairDailySignalId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSignalGetPairDailySignalsT2GraphicPost(
      pairDailySignalId?: number,
      options?: any,
    ): AxiosPromise<GetPairDailySignalsT2GraphicResponseResponseData> {
      return localVarFp
        .apiSignalGetPairDailySignalsT2GraphicPost(pairDailySignalId, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * SignalApi - object-oriented interface
 * @export
 * @class SignalApi
 * @extends {BaseAPI}
 */
export class SignalApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetApprovedDailySignalStrategiesPost(
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetApprovedDailySignalStrategiesPost(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetApprovedHourlySignalStrategiesPost(
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetApprovedHourlySignalStrategiesPost(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {GraphicDataRequest} [graphicDataRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetDailyScanningGraphicsPost(
    graphicDataRequest?: GraphicDataRequest,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetDailyScanningGraphicsPost(graphicDataRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {EquitySignalRequest} [equitySignalRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetDailyScanningSignalsPost(
    equitySignalRequest?: EquitySignalRequest,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetDailyScanningSignalsPost(equitySignalRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {GraphicDataRequest} [graphicDataRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetHourlyEquityBuySellGraphicPost(
    graphicDataRequest?: GraphicDataRequest,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetHourlyEquityBuySellGraphicPost(graphicDataRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {GraphicDataRequest} [graphicDataRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetHourlyEquityCumulativeReturnPost(
    graphicDataRequest?: GraphicDataRequest,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetHourlyEquityCumulativeReturnPost(graphicDataRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {EquitySignalRequest} [equitySignalRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetHourlyEquityDecisionStatusPost(
    equitySignalRequest?: EquitySignalRequest,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetHourlyEquityDecisionStatusPost(equitySignalRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {EquitySignalRequest} [equitySignalRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetHourlyEquityDecisionStrategyPerformancePost(
    equitySignalRequest?: EquitySignalRequest,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetHourlyEquityDecisionStrategyPerformancePost(
        equitySignalRequest,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {GraphicDataRequest} [graphicDataRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetHourlyEquityDrawdownPost(
    graphicDataRequest?: GraphicDataRequest,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetHourlyEquityDrawdownPost(graphicDataRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {GraphicDataRequest} [graphicDataRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetHourlyEquityReturnPost(
    graphicDataRequest?: GraphicDataRequest,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetHourlyEquityReturnPost(graphicDataRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {EquitySignalRequest} [equitySignalRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetHourlyEquitySpeedometerGraphicPost(
    equitySignalRequest?: EquitySignalRequest,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetHourlyEquitySpeedometerGraphicPost(
        equitySignalRequest,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PairSymSpecRequest} [pairSymSpecRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetPairDailySignalsP1GraphicPost(
    pairSymSpecRequest?: PairSymSpecRequest,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetPairDailySignalsP1GraphicPost(pairSymSpecRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PairSymSpecRequest} [pairSymSpecRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetPairDailySignalsP2GraphicPost(
    pairSymSpecRequest?: PairSymSpecRequest,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetPairDailySignalsP2GraphicPost(pairSymSpecRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PairDailySignalRequest} [pairDailySignalRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetPairDailySignalsPost(
    pairDailySignalRequest?: PairDailySignalRequest,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetPairDailySignalsPost(pairDailySignalRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [pairDailySignalId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetPairDailySignalsT1GraphicPost(
    pairDailySignalId?: number,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetPairDailySignalsT1GraphicPost(pairDailySignalId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [pairDailySignalId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignalApi
   */
  public apiSignalGetPairDailySignalsT2GraphicPost(
    pairDailySignalId?: number,
    options?: AxiosRequestConfig,
  ) {
    return SignalApiFp(this.configuration)
      .apiSignalGetPairDailySignalsT2GraphicPost(pairDailySignalId, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * TokenApi - axios parameter creator
 * @export
 */
export const TokenApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} [reqSmsCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTokenCustomerApproveSmsPost: async (
      reqSmsCode?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Token/CustomerApproveSms`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      if (reqSmsCode !== undefined) {
        localVarQueryParameter['reqSmsCode'] = reqSmsCode;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CustomerBirthdateCheckRequest} [customerBirthdateCheckRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTokenCustomerCheckAndSendSmsPost: async (
      customerBirthdateCheckRequest?: CustomerBirthdateCheckRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Token/CustomerCheckAndSendSms`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        customerBirthdateCheckRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTokenGetCapchaPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Token/GetCapcha`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTokenGetCustomerInfoPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Token/GetCustomerInfo`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTokenRefreshTokenPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Token/RefreshToken`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTokenSendSmsToCustomerPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Token/SendSmsToCustomer`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TokenApi - functional programming interface
 * @export
 */
export const TokenApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TokenApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [reqSmsCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTokenCustomerApproveSmsPost(
      reqSmsCode?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TokenResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTokenCustomerApproveSmsPost(
          reqSmsCode,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {CustomerBirthdateCheckRequest} [customerBirthdateCheckRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTokenCustomerCheckAndSendSmsPost(
      customerBirthdateCheckRequest?: CustomerBirthdateCheckRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TokenResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTokenCustomerCheckAndSendSmsPost(
          customerBirthdateCheckRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTokenGetCapchaPost(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CaptchaResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTokenGetCapchaPost(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTokenGetCustomerInfoPost(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CustomersModelResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTokenGetCustomerInfoPost(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTokenRefreshTokenPost(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TokenResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTokenRefreshTokenPost(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTokenSendSmsToCustomerPost(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TokenResponseResponseData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTokenSendSmsToCustomerPost(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * TokenApi - factory interface
 * @export
 */
export const TokenApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TokenApiFp(configuration);
  return {
    /**
     *
     * @param {string} [reqSmsCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTokenCustomerApproveSmsPost(
      reqSmsCode?: string,
      options?: any,
    ): AxiosPromise<TokenResponseResponseData> {
      return localVarFp
        .apiTokenCustomerApproveSmsPost(reqSmsCode, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {CustomerBirthdateCheckRequest} [customerBirthdateCheckRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTokenCustomerCheckAndSendSmsPost(
      customerBirthdateCheckRequest?: CustomerBirthdateCheckRequest,
      options?: any,
    ): AxiosPromise<TokenResponseResponseData> {
      return localVarFp
        .apiTokenCustomerCheckAndSendSmsPost(
          customerBirthdateCheckRequest,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTokenGetCapchaPost(
      options?: any,
    ): AxiosPromise<CaptchaResponseResponseData> {
      return localVarFp
        .apiTokenGetCapchaPost(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTokenGetCustomerInfoPost(
      options?: any,
    ): AxiosPromise<CustomersModelResponseData> {
      return localVarFp
        .apiTokenGetCustomerInfoPost(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTokenRefreshTokenPost(
      options?: any,
    ): AxiosPromise<TokenResponseResponseData> {
      return localVarFp
        .apiTokenRefreshTokenPost(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTokenSendSmsToCustomerPost(
      options?: any,
    ): AxiosPromise<TokenResponseResponseData> {
      return localVarFp
        .apiTokenSendSmsToCustomerPost(options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * TokenApi - object-oriented interface
 * @export
 * @class TokenApi
 * @extends {BaseAPI}
 */
export class TokenApi extends BaseAPI {
  /**
   *
   * @param {string} [reqSmsCode]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TokenApi
   */
  public apiTokenCustomerApproveSmsPost(
    reqSmsCode?: string,
    options?: AxiosRequestConfig,
  ) {
    return TokenApiFp(this.configuration)
      .apiTokenCustomerApproveSmsPost(reqSmsCode, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CustomerBirthdateCheckRequest} [customerBirthdateCheckRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TokenApi
   */
  public apiTokenCustomerCheckAndSendSmsPost(
    customerBirthdateCheckRequest?: CustomerBirthdateCheckRequest,
    options?: AxiosRequestConfig,
  ) {
    return TokenApiFp(this.configuration)
      .apiTokenCustomerCheckAndSendSmsPost(
        customerBirthdateCheckRequest,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TokenApi
   */
  public apiTokenGetCapchaPost(options?: AxiosRequestConfig) {
    return TokenApiFp(this.configuration)
      .apiTokenGetCapchaPost(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TokenApi
   */
  public apiTokenGetCustomerInfoPost(options?: AxiosRequestConfig) {
    return TokenApiFp(this.configuration)
      .apiTokenGetCustomerInfoPost(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TokenApi
   */
  public apiTokenRefreshTokenPost(options?: AxiosRequestConfig) {
    return TokenApiFp(this.configuration)
      .apiTokenRefreshTokenPost(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TokenApi
   */
  public apiTokenSendSmsToCustomerPost(options?: AxiosRequestConfig) {
    return TokenApiFp(this.configuration)
      .apiTokenSendSmsToCustomerPost(options)
      .then(request => request(this.axios, this.basePath));
  }
}
