// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Oyak Yatırım API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: destek@finnet.com.tr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
// @ts-ignore
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 * TeknikAnalizApi - axios parameter creator
 * @export
 */
export const TeknikAnalizApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    islemHacmiVeFiyatGrafikPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/IslemHacmiVeFiyatGrafik`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TeknikAnalizApi - functional programming interface
 * @export
 */
export const TeknikAnalizApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    TeknikAnalizApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async islemHacmiVeFiyatGrafikPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.islemHacmiVeFiyatGrafikPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * TeknikAnalizApi - factory interface
 * @export
 */
export const TeknikAnalizApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TeknikAnalizApiFp(configuration);
  return {
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    islemHacmiVeFiyatGrafikPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .islemHacmiVeFiyatGrafikPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * TeknikAnalizApi - object-oriented interface
 * @export
 * @class TeknikAnalizApi
 * @extends {BaseAPI}
 */
export class TeknikAnalizApi extends BaseAPI {
  /**
   *
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeknikAnalizApi
   */
  public islemHacmiVeFiyatGrafikPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TeknikAnalizApiFp(this.configuration)
      .islemHacmiVeFiyatGrafikPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * TeknikBakisApi - axios parameter creator
 * @export
 */
export const TeknikBakisApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destekDirencSeviyesiTablosuPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/DestekDirencSeviyesiTablosu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fiyatDegisimleriTablosuPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/FiyatDegisimleriTablosu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hareketliOrtalamaAnaliziTablosuPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/HareketliOrtalamaAnaliziTablosu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teknikGostergelerTablosuPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/TeknikGostergelerTablosu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teknikGostergelerYorumuPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/TeknikGostergelerYorumu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TeknikBakisApi - functional programming interface
 * @export
 */
export const TeknikBakisApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    TeknikBakisApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async destekDirencSeviyesiTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.destekDirencSeviyesiTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fiyatDegisimleriTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.fiyatDegisimleriTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hareketliOrtalamaAnaliziTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.hareketliOrtalamaAnaliziTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teknikGostergelerTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.teknikGostergelerTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teknikGostergelerYorumuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.teknikGostergelerYorumuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * TeknikBakisApi - factory interface
 * @export
 */
export const TeknikBakisApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TeknikBakisApiFp(configuration);
  return {
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destekDirencSeviyesiTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .destekDirencSeviyesiTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fiyatDegisimleriTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .fiyatDegisimleriTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hareketliOrtalamaAnaliziTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .hareketliOrtalamaAnaliziTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teknikGostergelerTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .teknikGostergelerTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teknikGostergelerYorumuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .teknikGostergelerYorumuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * TeknikBakisApi - object-oriented interface
 * @export
 * @class TeknikBakisApi
 * @extends {BaseAPI}
 */
export class TeknikBakisApi extends BaseAPI {
  /**
   *
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeknikBakisApi
   */
  public destekDirencSeviyesiTablosuPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TeknikBakisApiFp(this.configuration)
      .destekDirencSeviyesiTablosuPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeknikBakisApi
   */
  public fiyatDegisimleriTablosuPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TeknikBakisApiFp(this.configuration)
      .fiyatDegisimleriTablosuPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeknikBakisApi
   */
  public hareketliOrtalamaAnaliziTablosuPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TeknikBakisApiFp(this.configuration)
      .hareketliOrtalamaAnaliziTablosuPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeknikBakisApi
   */
  public teknikGostergelerTablosuPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TeknikBakisApiFp(this.configuration)
      .teknikGostergelerTablosuPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeknikBakisApi
   */
  public teknikGostergelerYorumuPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TeknikBakisApiFp(this.configuration)
      .teknikGostergelerYorumuPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * TemelBakisApi - axios parameter creator
 * @export
 */
export const TemelBakisApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    degerlemeCarpanlariTablosuPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/DegerlemeCarpanlariTablosu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Hisse Dönem Listesi Döndürür
     * @param {string} [kod]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hisseDonemListesiGet: async (
      kod?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/HisseDonemListesi`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (kod !== undefined) {
        localVarQueryParameter['kod'] = kod;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary HisseKapanisGrafikVeri ve HisseKapanisGoreceliGrafikVeri  verileri için V2 versiyon metotlarını kullanınız...
     * @param {string} [baz]
     * @param {string} [doviz]
     * @param {string} [tarihArtanSira]
     * @param {string} [kod]
     * @param {string} [sonTarih]
     * @param {string} [ilkTarih]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hisseKapanisGrafikVeriPost: async (
      baz?: string,
      doviz?: string,
      tarihArtanSira?: string,
      kod?: string,
      sonTarih?: string,
      ilkTarih?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/HisseKapanisGrafikVeri`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (doviz !== undefined) {
        localVarQueryParameter['Doviz'] = doviz;
      }

      if (tarihArtanSira !== undefined) {
        localVarQueryParameter['TarihArtanSira'] = tarihArtanSira;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (sonTarih !== undefined) {
        localVarQueryParameter['SonTarih'] = sonTarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Hisse Listesi Döndürür
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hisseListesiGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/HisseListesi`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [kod]
     * @param {string} [tarih]
     * @param {string} [hesapDonem]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [ortalamaTarih]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    temelBakisYorumuPost: async (
      kod?: string,
      tarih?: string,
      hesapDonem?: string,
      hisseBilancoFormat?: string,
      ortalamaTarih?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/TemelBakisYorumu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (ortalamaTarih !== undefined) {
        localVarQueryParameter['OrtalamaTarih'] = ortalamaTarih;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TemelBakisApi - functional programming interface
 * @export
 */
export const TemelBakisApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    TemelBakisApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async degerlemeCarpanlariTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.degerlemeCarpanlariTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Hisse Dönem Listesi Döndürür
     * @param {string} [kod]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hisseDonemListesiGet(
      kod?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.hisseDonemListesiGet(kod, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary HisseKapanisGrafikVeri ve HisseKapanisGoreceliGrafikVeri  verileri için V2 versiyon metotlarını kullanınız...
     * @param {string} [baz]
     * @param {string} [doviz]
     * @param {string} [tarihArtanSira]
     * @param {string} [kod]
     * @param {string} [sonTarih]
     * @param {string} [ilkTarih]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hisseKapanisGrafikVeriPost(
      baz?: string,
      doviz?: string,
      tarihArtanSira?: string,
      kod?: string,
      sonTarih?: string,
      ilkTarih?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.hisseKapanisGrafikVeriPost(
          baz,
          doviz,
          tarihArtanSira,
          kod,
          sonTarih,
          ilkTarih,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Hisse Listesi Döndürür
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hisseListesiGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.hisseListesiGet(
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [kod]
     * @param {string} [tarih]
     * @param {string} [hesapDonem]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [ortalamaTarih]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async temelBakisYorumuPost(
      kod?: string,
      tarih?: string,
      hesapDonem?: string,
      hisseBilancoFormat?: string,
      ortalamaTarih?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.temelBakisYorumuPost(
          kod,
          tarih,
          hesapDonem,
          hisseBilancoFormat,
          ortalamaTarih,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * TemelBakisApi - factory interface
 * @export
 */
export const TemelBakisApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TemelBakisApiFp(configuration);
  return {
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    degerlemeCarpanlariTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .degerlemeCarpanlariTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Hisse Dönem Listesi Döndürür
     * @param {string} [kod]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hisseDonemListesiGet(kod?: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .hisseDonemListesiGet(kod, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary HisseKapanisGrafikVeri ve HisseKapanisGoreceliGrafikVeri  verileri için V2 versiyon metotlarını kullanınız...
     * @param {string} [baz]
     * @param {string} [doviz]
     * @param {string} [tarihArtanSira]
     * @param {string} [kod]
     * @param {string} [sonTarih]
     * @param {string} [ilkTarih]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hisseKapanisGrafikVeriPost(
      baz?: string,
      doviz?: string,
      tarihArtanSira?: string,
      kod?: string,
      sonTarih?: string,
      ilkTarih?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .hisseKapanisGrafikVeriPost(
          baz,
          doviz,
          tarihArtanSira,
          kod,
          sonTarih,
          ilkTarih,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Hisse Listesi Döndürür
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hisseListesiGet(options?: any): AxiosPromise<void> {
      return localVarFp
        .hisseListesiGet(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} [kod]
     * @param {string} [tarih]
     * @param {string} [hesapDonem]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [ortalamaTarih]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    temelBakisYorumuPost(
      kod?: string,
      tarih?: string,
      hesapDonem?: string,
      hisseBilancoFormat?: string,
      ortalamaTarih?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .temelBakisYorumuPost(
          kod,
          tarih,
          hesapDonem,
          hisseBilancoFormat,
          ortalamaTarih,
          options,
        )
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * TemelBakisApi - object-oriented interface
 * @export
 * @class TemelBakisApi
 * @extends {BaseAPI}
 */
export class TemelBakisApi extends BaseAPI {
  basicOverviewApi(
    base: string | undefined,
    code: string | undefined,
    shareBalanceFormat: string | undefined,
    date: string | undefined,
    firstDate: string | undefined,
    accountPeriod: string | undefined,
  ) {
    throw new Error('Method not implemented.');
  }
  /**
   *
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TemelBakisApi
   */
  public degerlemeCarpanlariTablosuPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TemelBakisApiFp(this.configuration)
      .degerlemeCarpanlariTablosuPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Hisse Dönem Listesi Döndürür
   * @param {string} [kod]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TemelBakisApi
   */
  public hisseDonemListesiGet(kod?: string, options?: AxiosRequestConfig) {
    return TemelBakisApiFp(this.configuration)
      .hisseDonemListesiGet(kod, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary HisseKapanisGrafikVeri ve HisseKapanisGoreceliGrafikVeri  verileri için V2 versiyon metotlarını kullanınız...
   * @param {string} [baz]
   * @param {string} [doviz]
   * @param {string} [tarihArtanSira]
   * @param {string} [kod]
   * @param {string} [sonTarih]
   * @param {string} [ilkTarih]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TemelBakisApi
   */
  public hisseKapanisGrafikVeriPost(
    baz?: string,
    doviz?: string,
    tarihArtanSira?: string,
    kod?: string,
    sonTarih?: string,
    ilkTarih?: string,
    options?: AxiosRequestConfig,
  ) {
    return TemelBakisApiFp(this.configuration)
      .hisseKapanisGrafikVeriPost(
        baz,
        doviz,
        tarihArtanSira,
        kod,
        sonTarih,
        ilkTarih,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Hisse Listesi Döndürür
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TemelBakisApi
   */
  public hisseListesiGet(options?: AxiosRequestConfig) {
    return TemelBakisApiFp(this.configuration)
      .hisseListesiGet(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [kod]
   * @param {string} [tarih]
   * @param {string} [hesapDonem]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [ortalamaTarih]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TemelBakisApi
   */
  public temelBakisYorumuPost(
    kod?: string,
    tarih?: string,
    hesapDonem?: string,
    hisseBilancoFormat?: string,
    ortalamaTarih?: string,
    options?: AxiosRequestConfig,
  ) {
    return TemelBakisApiFp(this.configuration)
      .temelBakisYorumuPost(
        kod,
        tarih,
        hesapDonem,
        hisseBilancoFormat,
        ortalamaTarih,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * TemelVerilerApi - axios parameter creator
 * @export
 */
export const TemelVerilerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    borclulukBilgileriTablosuPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/BorclulukBilgileriTablosu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hisseOzetiTablosuPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/HisseOzetiTablosu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hissePerformansiTablosuPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/HissePerformansiTablosu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary KarlilikOraniTablosu verileri için  V2 versiyonu metotlarını kullanınız...
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    karlilikOraniTablosuPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/KarlilikOraniTablosu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary OzetFinansallarTablosu verileri için  V2 versiyonu metotlarını kullanınız...
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ozetFinansallarTablosuPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/OzetFinansallarTablosu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    temettuBilgileriTablosuPost: async (
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/TemettuBilgileriTablosu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (baz !== undefined) {
        localVarQueryParameter['Baz'] = baz;
      }

      if (kod !== undefined) {
        localVarQueryParameter['Kod'] = kod;
      }

      if (hisseBilancoFormat !== undefined) {
        localVarQueryParameter['HisseBilancoFormat'] = hisseBilancoFormat;
      }

      if (tarih !== undefined) {
        localVarQueryParameter['Tarih'] = tarih;
      }

      if (ilkTarih !== undefined) {
        localVarQueryParameter['IlkTarih'] = ilkTarih;
      }

      if (hesapDonem !== undefined) {
        localVarQueryParameter['HesapDonem'] = hesapDonem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TemelVerilerApi - functional programming interface
 * @export
 */
export const TemelVerilerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    TemelVerilerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async borclulukBilgileriTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.borclulukBilgileriTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hisseOzetiTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.hisseOzetiTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hissePerformansiTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.hissePerformansiTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary KarlilikOraniTablosu verileri için  V2 versiyonu metotlarını kullanınız...
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async karlilikOraniTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.karlilikOraniTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary OzetFinansallarTablosu verileri için  V2 versiyonu metotlarını kullanınız...
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ozetFinansallarTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.ozetFinansallarTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async temettuBilgileriTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.temettuBilgileriTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * TemelVerilerApi - factory interface
 * @export
 */
export const TemelVerilerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TemelVerilerApiFp(configuration);
  return {
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    borclulukBilgileriTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .borclulukBilgileriTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hisseOzetiTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .hisseOzetiTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hissePerformansiTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .hissePerformansiTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary KarlilikOraniTablosu verileri için  V2 versiyonu metotlarını kullanınız...
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    karlilikOraniTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .karlilikOraniTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary OzetFinansallarTablosu verileri için  V2 versiyonu metotlarını kullanınız...
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ozetFinansallarTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .ozetFinansallarTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} [baz]
     * @param {string} [kod]
     * @param {string} [hisseBilancoFormat]
     * @param {string} [tarih]
     * @param {string} [ilkTarih]
     * @param {string} [hesapDonem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    temettuBilgileriTablosuPost(
      baz?: string,
      kod?: string,
      hisseBilancoFormat?: string,
      tarih?: string,
      ilkTarih?: string,
      hesapDonem?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .temettuBilgileriTablosuPost(
          baz,
          kod,
          hisseBilancoFormat,
          tarih,
          ilkTarih,
          hesapDonem,
          options,
        )
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * TemelVerilerApi - object-oriented interface
 * @export
 * @class TemelVerilerApi
 * @extends {BaseAPI}
 */
export class TemelVerilerApi extends BaseAPI {
  /**
   *
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TemelVerilerApi
   */
  public borclulukBilgileriTablosuPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TemelVerilerApiFp(this.configuration)
      .borclulukBilgileriTablosuPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TemelVerilerApi
   */
  public hisseOzetiTablosuPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TemelVerilerApiFp(this.configuration)
      .hisseOzetiTablosuPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TemelVerilerApi
   */
  public hissePerformansiTablosuPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TemelVerilerApiFp(this.configuration)
      .hissePerformansiTablosuPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary KarlilikOraniTablosu verileri için  V2 versiyonu metotlarını kullanınız...
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TemelVerilerApi
   */
  public karlilikOraniTablosuPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TemelVerilerApiFp(this.configuration)
      .karlilikOraniTablosuPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary OzetFinansallarTablosu verileri için  V2 versiyonu metotlarını kullanınız...
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TemelVerilerApi
   */
  public ozetFinansallarTablosuPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TemelVerilerApiFp(this.configuration)
      .ozetFinansallarTablosuPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [baz]
   * @param {string} [kod]
   * @param {string} [hisseBilancoFormat]
   * @param {string} [tarih]
   * @param {string} [ilkTarih]
   * @param {string} [hesapDonem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TemelVerilerApi
   */
  public temettuBilgileriTablosuPost(
    baz?: string,
    kod?: string,
    hisseBilancoFormat?: string,
    tarih?: string,
    ilkTarih?: string,
    hesapDonem?: string,
    options?: AxiosRequestConfig,
  ) {
    return TemelVerilerApiFp(this.configuration)
      .temettuBilgileriTablosuPost(
        baz,
        kod,
        hisseBilancoFormat,
        tarih,
        ilkTarih,
        hesapDonem,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }
}
